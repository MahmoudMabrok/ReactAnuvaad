{"version":3,"sources":["components/header/Header.tsx","components/utils/FileUtils.ts","components/utils/StringUtils.ts","components/utils/LangUtils.ts","components/content/FileUploadComponent.tsx","components/content/CodeBlockComponent.tsx","components/LanguageButton.tsx","components/content/LanguageSelectComponent.tsx","components/content/ErrorMsgComponent.tsx","components/content/ContentComponent.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["Header","className","React","Component","FileUtils","file","Promise","resolve","reject","reader","FileReader","onerror","onload","result","readAsBinaryString","StringUtils","jsonArray","LangUtils","translateText","language","textToTranslate","url","fetch","method","headers","Accept","FileUploadComponent","id","type","onChange","this","props","onFileSelect","accept","multiple","htmlFor","PureComponent","CodeBlockComponent","style","width","overflow","textAlign","showLineNumbers","androidstudio","customStyle","height","code","LanguageButton","onClick","_","handler","languageCode","isSelected","name","languageName","LanguageSelectComponent","languages","languageArry","map","selectLanguageHandler","selectedLanguageCode","ErrorMsgComponent","errorMsg","ContentComponent","translatedXmlString","onLanguageChange","setState","startTranslation","event","state","getFileFromInput","then","binary","jsonObj","JSON","parse","xml2json","compact","inputText","undefined","resources","string","forEach","element","index","_attributes","translatable","_text","value","json","data","translations","translatedText","push","json2xml","getXmlTree","stringify","spaces","onFileInput","persist","target","files","err","languageArray","Button","App","href","data-ribbon","title","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.846bfaed.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default class Header extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"header\">\r\n                <h1>Anuvaad</h1>\r\n                <p className=\"lead text-muted\">Localize your app in global languages</p>\r\n            </div>\r\n        );\r\n    }\r\n}","export default class FileUtils {\r\n\r\n    public static getFileFromInput(file: File): Promise<any> {\r\n        return new Promise(function (resolve, reject) {\r\n            const reader = new FileReader();\r\n            reader.onerror = reject;\r\n            reader.onload = function () { resolve(reader.result); };\r\n            reader.readAsBinaryString(file); // here the file can be read in different way Text, DataUrl, ArrayBuffer\r\n        });\r\n    }\r\n}","\r\n\r\nexport default class StringUtils {\r\n\r\n    \r\n    public static getXmlTree(jsonArray: string): string {\r\n        return \"{\\\"resources\\\": {\\\"string\\\":\" + jsonArray + \"}}\";\r\n    }\r\n}\r\n","export default class LangUtils {\r\n\r\n    public static translateText = (language:string, textToTranslate: string): Promise<Response> => {\r\n        const apiKey = process.env.REACT_APP_LANG_TRANSLATION_API_KEY;          // server key\r\n        // const apiKey = process.env.REACT_APP_GITHUB_TRANSLATION_KEY;         // local key\r\n        let url = \"https://translation.googleapis.com/language/translate/v2?key=\"+apiKey+\"&source=en&target=\" + language;\r\n        url += \"&q=\" + textToTranslate;\r\n        return fetch(url, {\r\n            method: 'GET',\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                Accept: \"application/json\"\r\n            }\r\n        });\r\n    }\r\n}\r\n","import React, { ChangeEvent } from 'react';\r\n\r\n\r\ninterface FileUploadProps {\r\n    onFileSelect: (event: ChangeEvent<HTMLInputElement>)=> void\r\n}\r\n\r\nexport default class FileUploadComponent extends React.PureComponent<FileUploadProps> {\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"custom-file left-align alert alert-info\">\r\n            <input id=\"logo\" type=\"file\" className=\"custom-file-input\" onChange={this.props.onFileSelect} accept=\".xml\" multiple={false} />\r\n            <label htmlFor=\"logo\" className=\"custom-file-label text-truncate\">Select strings.xml file</label>\r\n        </div>\r\n        );\r\n    }\r\n\r\n}","\r\nimport React from 'react';\r\nimport SyntaxHighlighter from 'react-syntax-highlighter';\r\nimport { androidstudio } from 'react-syntax-highlighter/dist/esm/styles/hljs';\r\n\r\ninterface CodeBlockProps {\r\n    code: string\r\n}\r\n\r\nexport default class CodeBlockComponent extends React.Component<CodeBlockProps> {\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"col-sm\" style={{ width: 520, overflow: 'auto', textAlign: 'left' }}>\r\n                <SyntaxHighlighter language=\"xml\" showLineNumbers={true} style={androidstudio} customStyle={{ height: 400 }}>\r\n                    {this.props.code}\r\n                </SyntaxHighlighter>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}","import React from 'react';\r\n\r\nexport interface LanguageProps {\r\n    handler: (languageCode: string) => void,\r\n    languageName: string,\r\n    isSelected: boolean,\r\n    languageCode: string\r\n\r\n}\r\n\r\nexport default class LanguageButton extends React.PureComponent<LanguageProps> {\r\n\r\n    render() {\r\n\r\n        let className = \"btn btn-link col-sm\";\r\n        if (this.props.isSelected) {\r\n            className = \"btn btn-success col-sm\";\r\n        }\r\n        \r\n        return (\r\n            <button className={className} name={this.props.languageName} onClick={this.onClick}>\r\n                {this.props.languageName}\r\n            </button>\r\n        );\r\n        \r\n    }\r\n\r\n    onClick = (_: React.MouseEvent<HTMLButtonElement, MouseEvent>): void => {\r\n        this.props.handler(this.props.languageCode);\r\n    }\r\n\r\n}","import React from 'react';\r\nimport LanguageButton from '../LanguageButton';\r\nimport Language from '../../models/Language';\r\n\r\ninterface LanguageSelectProps {\r\n    selectedLanguageCode: string,\r\n    selectLanguageHandler: (languageCode: string) => void,\r\n    languageArry: Language[]\r\n\r\n}\r\n\r\nexport default class LanguageSelectComponent extends React.Component<LanguageSelectProps> {\r\n\r\n    render() {\r\n\r\n        const languages = this.props.languageArry.map((language: Language) =>\r\n            <LanguageButton\r\n                languageCode={language.code}\r\n                languageName={language.name}\r\n                handler={this.props.selectLanguageHandler}\r\n                isSelected={this.props.selectedLanguageCode === language.code} />\r\n        );\r\n\r\n        return (\r\n            <div className=\"row\">\r\n                {languages}\r\n            </div>\r\n        );\r\n    }\r\n\r\n}","import React from 'react';\r\n\r\ninterface ErrorProps {\r\n    errorMsg?: string\r\n}\r\n\r\nexport default class ErrorMsgComponent extends React.Component<ErrorProps> {\r\n\r\n    render() {\r\n\r\n        if (!this.props.errorMsg) {\r\n            return null;\r\n        }\r\n\r\n        return (\r\n            <div className=\"alert alert-warning alert\">\r\n                {this.props.errorMsg}\r\n            </div>\r\n        );\r\n    }\r\n\r\n}","import React, { ChangeEvent } from 'react';\r\nimport { Button } from 'react-bootstrap';\r\n\r\nimport { json2xml, xml2json } from 'xml-js';\r\nimport XmlString from '../../models/XmlString';\r\nimport FileUtils from '../utils/FileUtils';\r\nimport StringUtils from '../utils/StringUtils';\r\nimport LangUtils from '../utils/LangUtils';\r\nimport FileUploadComponent from './FileUploadComponent';\r\nimport CodeBlockComponent from './CodeBlockComponent';\r\nimport LanguageSelectComponent from './LanguageSelectComponent';\r\nimport Language from '../../models/Language';\r\nimport ErrorMsgComponent from './ErrorMsgComponent';\r\n\r\ninterface ContentProps {\r\n    languageArray: Language[]\r\n}\r\n\r\ninterface ContentState {\r\n    inputText: string,\r\n    translatedText: string,\r\n    language: string,\r\n    file?: File,\r\n    errorMsg?: string | undefined\r\n}\r\n\r\nexport default class ContentComponent extends React.Component<ContentProps, ContentState> {\r\n\r\n    private translatedXmlString: XmlString[];\r\n\r\n    constructor(props: ContentProps) {\r\n        super(props);\r\n        this.state = {\r\n            inputText: \"Select your Strings.xml file from resources\",\r\n            translatedText: \"Hit 'Translate' to start\",\r\n            language: \"es\",\r\n\r\n        };\r\n        this.translatedXmlString = [];\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <FileUploadComponent onFileSelect={this.onFileInput} />\r\n\r\n                <div>\r\n                    <ErrorMsgComponent errorMsg={this.state.errorMsg} />\r\n                </div>\r\n\r\n                <div className=\"container pt-md-3 pb-md-3 mx-auto\">\r\n                    <div className=\"row\">\r\n                        <CodeBlockComponent code={this.state.inputText} />\r\n                        <CodeBlockComponent code={this.state.translatedText} />\r\n                    </div>\r\n                </div>\r\n                <LanguageSelectComponent\r\n                    selectedLanguageCode={this.state.language}\r\n                    languageArry={this.props.languageArray}\r\n                    selectLanguageHandler={this.onLanguageChange} />\r\n\r\n                <div className=\"row pt-md-4\">\r\n                    <Button className=\"col-sm\" onClick={this.startTranslation} name=\"Click Me\">Translate</Button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private onLanguageChange = (language: string): void => {\r\n        this.setState({ language: language });\r\n    }\r\n\r\n    private startTranslation = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>): void => {\r\n\r\n        if (this.state.file) {\r\n            this.translatedXmlString = [];\r\n            FileUtils.getFileFromInput(this.state.file).then((binary) => {\r\n                const jsonObj = JSON.parse(xml2json(binary, { compact: true }));\r\n                this.setState({\r\n                    inputText: binary,\r\n                    errorMsg: undefined\r\n                })\r\n\r\n                jsonObj.resources.string.forEach((element: XmlString, index: number) => {\r\n                    if (!element._attributes.translatable) {\r\n                        const translatedText = LangUtils.translateText(this.state.language, element._text);\r\n                        translatedText.then((value: Response) => {\r\n                            value.json().then(value => {\r\n                                if (value.data?.translations[0]) {\r\n\r\n\r\n                                    element._text = value.data.translations[0].translatedText;\r\n                                    this.translatedXmlString.push(element);\r\n\r\n                                    this.setState({\r\n                                        translatedText: json2xml(StringUtils.getXmlTree(JSON.stringify(this.translatedXmlString)), { compact: true, spaces: 4 })\r\n                                    });\r\n                                } else {\r\n                                    this.setState({\r\n                                        errorMsg:\"Something went wrong, please try again.\"\r\n                                    });\r\n                                    return;\r\n                                }\r\n                            });\r\n                        });\r\n                    }\r\n                });\r\n            });\r\n        } else {\r\n            this.setState({\r\n                errorMsg: \"Please select a file\"\r\n            });\r\n        }\r\n    }\r\n\r\n    private onFileInput = (event: ChangeEvent<HTMLInputElement>): void => {\r\n\r\n        event.persist();\r\n\r\n        if (event.target.files) {\r\n            const file: File = event.target.files[0];\r\n\r\n            FileUtils.getFileFromInput(file).then((binary) => {\r\n                try {\r\n                    this.setState({\r\n                        file: file,\r\n                        inputText: binary\r\n                    });\r\n                } catch(err) {\r\n                    this.setState({\r\n                        errorMsg: \"Please select a valid XML. \" + err\r\n                    })\r\n                }\r\n                \r\n            });\r\n        }\r\n    }\r\n}","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport Header from './components/header/Header';\r\nimport ContentComponent from './components/content/ContentComponent';\r\nimport Language from './models/Language';\r\n\r\nconst languageArray: Language[] = [\r\n  {\r\n    name: 'Hindi (हिन्दी)',\r\n    code: 'hi'\r\n  }, {\r\n    name: 'Spanish (español)',\r\n    code: 'es'\r\n  }, {\r\n    name: 'Chinese (Zhōngwén)',\r\n    code: 'zh'\r\n  }, {\r\n    name: 'Arabic (اَلْعَرَبِيَّةُ)',\r\n    code: 'ar'\r\n  }, {\r\n    name: 'Russian (русский язык)',\r\n    code: 'ru'\r\n  },\r\n]\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <a className=\"github-fork-ribbon\" href=\"http://github.com/swapnil1104/ReactAnuvaad\" data-ribbon=\"Fork me on GitHub\" title=\"Fork me on GitHub\">Fork me on GitHub</a>\r\n      <Header />\r\n      <ContentComponent languageArray={languageArray} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}