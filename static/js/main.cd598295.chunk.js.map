{"version":3,"sources":["components/header/Header.tsx","components/utils/FileUtils.ts","components/utils/StringUtils.ts","components/utils/LangUtils.ts","components/content/FileUploadComponent.tsx","components/content/CodeBlockComponent.tsx","components/content/LanguageButton.tsx","components/content/LanguageSelectComponent.tsx","components/content/ContentComponent.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["Header","className","React","Component","FileUtils","file","Promise","resolve","reject","reader","FileReader","onerror","onload","result","readAsBinaryString","StringUtils","jsonArray","LangUtils","translateText","language","textToTranslate","url","fetch","method","headers","Accept","FileUploadComponent","id","type","onChange","this","props","onFileSelect","accept","multiple","htmlFor","PureComponent","CodeBlockComponent","style","width","overflow","textAlign","showLineNumbers","androidstudio","customStyle","height","code","LanguageButton","onClick","_","handler","languageCode","isSelected","name","languageName","LanguageSelectComponent","languages","languageArry","map","selectLanguageHandler","selectedLanguageCode","ContentComponent","translatedXmlString","onLanguageChange","setState","startTranslation","event","state","getFileFromInput","then","binary","jsonObj","JSON","parse","xml2json","compact","inputText","resources","string","forEach","element","index","_attributes","translatable","_text","value","json","data","translations","translatedText","push","json2xml","getXmlTree","stringify","spaces","onFileInput","persist","target","files","languageArray","Button","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.cd598295.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\n\r\nexport default class Header extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"header\">\r\n                <h1>Anuvaad</h1>\r\n                <p className=\"lead text-muted\">Localize your app in global languages</p>\r\n            </div>\r\n        );\r\n    }\r\n}","export default class FileUtils {\r\n\r\n    public static getFileFromInput(file: File): Promise<any> {\r\n        return new Promise(function (resolve, reject) {\r\n            const reader = new FileReader();\r\n            reader.onerror = reject;\r\n            reader.onload = function () { resolve(reader.result); };\r\n            reader.readAsBinaryString(file); // here the file can be read in different way Text, DataUrl, ArrayBuffer\r\n        });\r\n    }\r\n}","\r\n\r\nexport default class StringUtils {\r\n\r\n    \r\n    public static getXmlTree(jsonArray: string): string {\r\n        return \"{\\\"resources\\\": {\\\"string\\\":\" + jsonArray + \"}}\";\r\n    }\r\n}\r\n","export default class LangUtils {\r\n\r\n    public static translateText = (language:string, textToTranslate: string): Promise<Response> => {\r\n        const apiKey = process.env.REACT_APP_LANG_TRANSLATION_API_KEY\r\n        let url = \"https://translation.googleapis.com/language/translate/v2?key=\"+apiKey+\"&source=en&target=\" +    language;\r\n        url += \"&q=\" + textToTranslate;\r\n        return fetch(url, {\r\n            method: 'GET',\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                Accept: \"application/json\"\r\n            }\r\n        });\r\n    }\r\n}\r\n","import React, { ChangeEvent } from 'react';\r\n\r\n\r\ninterface FileUploadProps {\r\n    onFileSelect: (event: ChangeEvent<HTMLInputElement>)=> void\r\n}\r\n\r\nexport default class FileUploadComponent extends React.PureComponent<FileUploadProps> {\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"custom-file left-align alert alert-info\">\r\n            <input id=\"logo\" type=\"file\" className=\"custom-file-input\" onChange={this.props.onFileSelect} accept=\".xml\" multiple={false} />\r\n            <label htmlFor=\"logo\" className=\"custom-file-label text-truncate\">Select strings.xml file</label>\r\n        </div>\r\n        );\r\n    }\r\n\r\n}","\r\nimport React from 'react';\r\nimport SyntaxHighlighter from 'react-syntax-highlighter';\r\nimport { androidstudio } from 'react-syntax-highlighter/dist/esm/styles/hljs';\r\n\r\ninterface CodeBlockProps {\r\n    code: string\r\n}\r\n\r\nexport default class CodeBlockComponent extends React.Component<CodeBlockProps> {\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"col-sm\" style={{ width: 520, overflow: 'auto', textAlign: 'left' }}>\r\n                <SyntaxHighlighter language=\"xml\" showLineNumbers={true} style={androidstudio} customStyle={{ height: 400 }}>\r\n                    {this.props.code}\r\n                </SyntaxHighlighter>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\n\r\nexport interface LanguageProps {\r\n    handler: (languageCode: string) => void,\r\n    languageName: string,\r\n    isSelected: boolean,\r\n    languageCode: string\r\n\r\n}\r\n\r\nexport default class LanguageButton extends React.PureComponent<LanguageProps> {\r\n    constructor(props: LanguageProps) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n\r\n        let className = \"btn btn-link col-sm\";\r\n        if (this.props.isSelected) {\r\n            className = \"btn btn-success col-sm\";\r\n        }\r\n        \r\n        return (\r\n            <button className={className} name={this.props.languageName} onClick={this.onClick}>\r\n                {this.props.languageName}\r\n            </button>\r\n        );\r\n        \r\n    }\r\n\r\n    onClick = (_: React.MouseEvent<HTMLButtonElement, MouseEvent>): void => {\r\n        this.props.handler(this.props.languageCode);\r\n    }\r\n\r\n}","import React from 'react';\r\nimport LanguageButton from './LanguageButton';\r\nimport Language from '../../models/Language';\r\nimport language from 'react-syntax-highlighter/dist/esm/languages/hljs/1c';\r\n\r\ninterface LanguageSelectProps {\r\n    selectedLanguageCode: string,\r\n    selectLanguageHandler: (languageCode: string) => void,\r\n    languageArry: Language[]\r\n\r\n}\r\n\r\nexport default class LanguageSelectComponent extends React.Component<LanguageSelectProps> {\r\n\r\n    render() {\r\n\r\n        const languages = this.props.languageArry.map((language: Language) =>\r\n            <LanguageButton\r\n                languageCode={language.code}\r\n                languageName={language.name}\r\n                handler={this.props.selectLanguageHandler}\r\n                isSelected={this.props.selectedLanguageCode === language.code} />\r\n        );\r\n\r\n        return (\r\n            <div className=\"row\">\r\n                {languages}\r\n            </div>\r\n        );\r\n    }\r\n\r\n}","import React, { ChangeEvent } from 'react';\r\nimport { Button } from 'react-bootstrap';\r\nimport SyntaxHighlighter from 'react-syntax-highlighter';\r\n\r\nimport { json2xml, xml2json } from 'xml-js';\r\nimport LanguageButton from './LanguageButton';\r\nimport { androidstudio } from 'react-syntax-highlighter/dist/esm/styles/hljs';\r\nimport XmlString from '../../models/XmlString';\r\nimport FileUtils from '../utils/FileUtils';\r\nimport StringUtils from '../utils/StringUtils';\r\nimport LangUtils from '../utils/LangUtils';\r\nimport FileUploadComponent from './FileUploadComponent';\r\nimport CodeBlockComponent from './CodeBlockComponent';\r\nimport LanguageSelectComponent from './LanguageSelectComponent';\r\nimport Language from '../../models/Language';\r\n\r\ninterface ContentProps {\r\n    languageArray: Language[]\r\n}\r\n\r\ninterface ContentState {\r\n    inputText: string,\r\n    translatedText: string,\r\n    language: string,\r\n    file?: File\r\n}\r\n\r\nexport default class ContentComponent extends React.Component<ContentProps, ContentState> {\r\n\r\n    private translatedXmlString: XmlString[];\r\n\r\n    constructor(props: ContentProps) {\r\n        super(props);\r\n        this.state = {\r\n            inputText: \"Select your Strings.xml file from resources\",\r\n            translatedText: \"Hit 'Translate' to start\",\r\n            language: \"es\",\r\n\r\n        };\r\n        this.translatedXmlString = [];\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <FileUploadComponent onFileSelect={this.onFileInput} />\r\n\r\n                <div className=\"container pt-md-3 pb-md-3 mx-auto\">\r\n                    <div className=\"row\">\r\n                        <CodeBlockComponent code={this.state.inputText} />\r\n                        <CodeBlockComponent code={this.state.translatedText} />\r\n                    </div>\r\n                </div>\r\n                <LanguageSelectComponent\r\n                    selectedLanguageCode={this.state.language}\r\n                    languageArry={this.props.languageArray}\r\n                    selectLanguageHandler={this.onLanguageChange} />\r\n\r\n                <div className=\"row pt-md-4\">\r\n                    <Button className=\"col-sm\" onClick={this.startTranslation} name=\"Click Me\">Translate</Button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private onLanguageChange = (language: string): void => {\r\n        this.setState({ language: language });\r\n    }\r\n\r\n    private startTranslation = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>): void => {\r\n\r\n        if (this.state.file) {\r\n            this.translatedXmlString = [];\r\n            FileUtils.getFileFromInput(this.state.file).then((binary) => {\r\n                const jsonObj = JSON.parse(xml2json(binary, { compact: true }));\r\n                this.setState({\r\n                    inputText: binary\r\n                })\r\n\r\n                jsonObj.resources.string.forEach((element: XmlString, index: number) => {\r\n                    if (!element._attributes.translatable) {\r\n                        const translatedText = LangUtils.translateText(this.state.language, element._text);\r\n                        translatedText.then((value: Response) => {\r\n                            value.json().then(value => {\r\n                                element._text = value.data.translations[0].translatedText;\r\n                                this.translatedXmlString.push(element);\r\n\r\n                                this.setState({\r\n                                    translatedText: json2xml(StringUtils.getXmlTree(JSON.stringify(this.translatedXmlString)), { compact: true, spaces: 4 })\r\n                                });\r\n                            });\r\n                        });\r\n                    }\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    private onFileInput = (event: ChangeEvent<HTMLInputElement>): void => {\r\n\r\n        event.persist();\r\n\r\n        if (event.target.files) {\r\n            const file: File = event.target.files[0];\r\n\r\n            FileUtils.getFileFromInput(file).then((binary) => {\r\n                const jsonObj = JSON.parse(xml2json(binary, { compact: true }));\r\n                this.setState({\r\n                    file: file,\r\n                    inputText: binary\r\n                });\r\n            });\r\n        }\r\n    }\r\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Header from './components/header/Header';\nimport ContentComponent from './components/content/ContentComponent';\nimport Language from './models/Language';\n\nconst languageArray: Language[] = [\n  {\n    name: 'Hindi (हिन्दी)',\n    code: 'hi'\n  }, {\n    name: 'Spanish (español)',\n    code: 'es'\n  }, {\n    name: 'Chinese (Zhōngwén)',\n    code: 'zh'\n  }, {\n    name: 'Arabic (اَلْعَرَبِيَّةُ)',\n    code: 'ar'\n  }, {\n    name: 'Russian (русский язык)',\n    code: 'ru'\n  },\n]\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <ContentComponent languageArray={languageArray} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}